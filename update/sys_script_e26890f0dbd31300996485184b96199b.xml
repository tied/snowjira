<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>task_time_worked</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Time Worked Add/Update</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// reference to jira issue key for task
	var jiraIssueKey = null;
	
	// check if work added to JIRA integrated story
	var storyLookup = new GlideRecord('rm_story');
	storyLookup.addQuery("sys_id", current.task);
	storyLookup.setLimit(1);
	storyLookup.query();
	while ( storyLookup.next() ) {
		jiraIssueKey = storyLookup.getValue("x_232048_jira_inte_jira_issue_key");
	}
	
	// if not integrated to story check scrum task
	if ( jiraIssueKey == null ) {
		var taskLookup = new GlideRecord('rm_scrum_task');
		taskLookup.addQuery("sys_id", current.task);
		taskLookup.setLimit(1);
		taskLookup.query();
		while ( taskLookup.next() ) {
			jiraIssueKey = taskLookup.getValue("x_232048_jira_inte_jira_task_key");
		}
	}
	
	if ( jiraIssueKey == null ) {
		// not associated with jira entity nothing else to do
		return;
	}
	
	// jira credentials
	var jiraUrl = "";
	var jiraUser = "";
	var jiraPassword = "";
	
	// get jira settings from db
	var settings = new GlideRecord('x_232048_jira_inte_jira_settings');
	settings.setLimit(1);
	settings.query();
	while(settings.next()) {
		jiraUrl = settings.getDisplayValue('jira_url');
		jiraUser = settings.getDisplayValue('jira_user');
		jiraPassword = settings.getElement("jira_password").getDecryptedValue();	
	}

	var isInsert = true;
	var wsUrl = null; 	
	if ( current.x_232048_jira_inte_jira_work_id != null ) {
		if ( current.x_232048_jira_inte_jira_work_id.toString().length > 0 ) {
			// update existing jira worklog
			wsUrl = jiraUrl + "/rest/api/2/issue/" + jiraIssueKey + "/worklog/" + current.x_232048_jira_inte_jira_work_id;
			isInsert = false;
		}
	}
	
	if (isInsert) {
		// add new jira worklog
		wsUrl = jiraUrl + "/rest/api/2/issue/" + jiraIssueKey + "/worklog";		
	}
	
	// request object
	var requestObj = {};
	requestObj.comment = current.comments.toString();
	requestObj.timeSpentSeconds = parseInt(current.time_in_seconds.toString());
	if ( !isInsert ) {
		requestObj.id = current.x_232048_jira_inte_jira_work_id.toString();
	}
	var requestBody = JSON.stringify(requestObj);
	
	var responseBody;
	var status;
	var sm;

	try {
		
		sm = new sn_ws.RESTMessageV2(); 
		sm.setHttpMethod(isInsert ? "post" : "put");
		sm.setEndpoint(wsUrl);			
		sm.setBasicAuth(jiraUser,jiraPassword);
		sm.setRequestHeader('Content-Type','application/json');
		sm.setRequestHeader('Accept','application/json');
		sm.setRequestBody(requestBody);
		sm.setHttpTimeout(10000); 
		
		response = sm.execute();		

		responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
		status = response.getStatusCode();
		
		if ( isInsert ) {
			
			// get issue key
			result = JSON.parse(responseBody);
			var worklogId = result.id;
			
			// update worklog entry with jira id		
			var wl = new GlideRecord("task_time_worked");  
			wl.addQuery("sys_id",current.sys_id.toString() );
			wl.query();
			if (wl.next()) {
				wl.x_232048_jira_inte_jira_work_id = worklogId;
				wl.update();					
			}
			else {
				gs.info("WORKLOG NOT FOUND TO TAG JIRA ID...");
			}
			
		} // is insert
		
	} catch(ex) {
		responseBody = ex.toString();
		status = '500';
		
		gs.info("Create/Edit Worklog Error: " + responseBody );
		
	} finally {
		requestBody = sm ? sm.getRequestBody():null;
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-07-11 21:51:55</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e26890f0dbd31300996485184b96199b</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>Time Worked Add/Update</sys_name>
        <sys_overrides/>
        <sys_package display_value="JIRA Integration" source="x_232048_jira_inte">4b8f5740db031300996485184b96199e</sys_package>
        <sys_policy/>
        <sys_scope display_value="JIRA Integration">4b8f5740db031300996485184b96199e</sys_scope>
        <sys_update_name>sys_script_e26890f0dbd31300996485184b96199b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-07-12 19:43:41</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=e26890f0dbd31300996485184b96199b"/>
</record_update>
