<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sysevent_script_action">
    <sysevent_script_action action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition_script/>
        <description/>
        <event_name>rm_story.inserted</event_name>
        <name>Create JIRA Story</name>
        <order>100</order>
        <script><![CDATA[pushJIRAStory();

function pushJIRAStory() {
	
	// get project phase from db
	var phase = null;
	var project_phase = new GlideRecord('pm_project_task');
	project_phase.addQuery("sys_id", current.project_phase);
	project_phase.setLimit(1);
	project_phase.query();
	while(project_phase.next()) {
		phase = project_phase.getValue("x_232048_jira_inte_jira_project");				
	}	
	if ( phase == null ) {
		// no JIRA project selected, no integration required
		gs.info("NO PHASE SELECTED FOR INTEGRATION...");
		return;
	}
		
	// jira push objects
	var requestObj = {};
	var fieldsObj = {};
	var projectObj = {};	
	var issueTypeObj = {};
	var priorityObj = {};
		
	projectObj.key = phase; 
	issueTypeObj.name = "Story";	
	priorityObj.id = current.priority.toString();
		
	fieldsObj.project = projectObj;		
	fieldsObj.issuetype = issueTypeObj;	
	fieldsObj.priority = priorityObj;
	fieldsObj.summary = current.short_description.toString(); 
	fieldsObj.description = current.description.toString();  			
			
	requestObj.fields = fieldsObj;
	
	var requestBody = JSON.stringify(requestObj);
				
	// jira credentials
	var jiraUrl = "";
	var jiraUser = "";
	var jiraPassword = "";

	// get jira settings from db
	var settings = new GlideRecord('x_232048_jira_inte_jira_settings');
	settings.setLimit(1);
	settings.query();
	while(settings.next()) {
		jiraUrl = settings.getDisplayValue('jira_url');
		jiraUser = settings.getDisplayValue('jira_user');
		jiraPassword = settings.getElement("jira_password").getDecryptedValue();	
	}

	var wsUrl = jiraUrl + "/rest/api/2/issue";			
	
	var responseBody;
	var status;
	var sm;

	try {
		
		var issueExists = false;
		
		var searchBodyObj = {};
		searchBodyObj.jql = "project = '" + phase + "' AND summary ~ '" + current.short_description.toString() + "' AND issuetype = 'Story'";
		searchBodyObj.fields = ["summary"]; 
	
		var searchBody = JSON.stringify(searchBodyObj);		
		
		// first check jira for duplicate issue before insert
		sm = new sn_ws.RESTMessageV2();
		sm.setHttpMethod("post");
		sm.setEndpoint(jiraUrl + "/rest/api/2/search");			
		sm.setBasicAuth(jiraUser,jiraPassword);
		sm.setRequestHeader('Content-Type','application/json');
		sm.setRequestHeader('Accept','application/json');
		sm.setRequestBody(searchBody);
		sm.setHttpTimeout(10000); 
		
		response = sm.execute();
		responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
		
		var result = JSON.parse(responseBody);	
		
		if ( result.total.toString() != "0" ) {
			issueExists = true;
		}
		
		if ( !issueExists ) {

			sm = new sn_ws.RESTMessageV2(); 
			sm.setHttpMethod("post");
			sm.setEndpoint(wsUrl);			
			sm.setBasicAuth(jiraUser,jiraPassword);
			sm.setRequestHeader('Content-Type','application/json');
			sm.setRequestHeader('Accept','application/json');
			sm.setRequestBody(requestBody);
			sm.setHttpTimeout(10000); 

			//gs.info("REQUEST BODY: " + requestBody);

			response = sm.execute();

			responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
			status = response.getStatusCode();

			//gs.info("RESPONSE BODY: " + responseBody);

			// get issue key
			result = JSON.parse(responseBody);
			var jiraissuekey = result.key;

			// update user story with jira issue key		
			var story = new GlideRecord("rm_story");  
			story.addQuery("sys_id",current.sys_id);
			story.query();
			if (story.next()) {
				story.x_232048_jira_inte_jira_issue_key = jiraissuekey;
				story.update();			
			}

			// get list of transitions available to issue
			sm = new sn_ws.RESTMessageV2();
			sm.setHttpMethod("get");
			sm.setEndpoint(wsUrl + "/" + jiraissuekey + "/transitions");
			sm.setBasicAuth(jiraUser,jiraPassword);
			sm.setRequestHeader('Content-Type','application/json');
			sm.setRequestHeader('Accept','application/json');
			sm.setHttpTimeout(10000); 

			response = sm.execute();
			responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
			status = response.getStatusCode();

			//gs.info("ISSUE TRANSITIONS: " + responseBody);

			var transitionsObj = JSON.parse(responseBody);
			var transitions = transitionsObj.transitions;	

			// make transition request object
			var tRequestBody = null;
			var tRequestObj = {};	
			var transitionObj = null;
			for (var x=0; x<transitions.length; x++) {
				if ( (transitions[x].name.toString() == "In Progress") && (current.state.toString() == "2") ) {
					transitionObj = {};
					transitionObj.id = transitions[x].id.toString();
					break;
				}
				else if ( (transitions[x].name.toString() == "Done") && (current.state.toString() == "3") ) {
					transitionObj = {};
					transitionObj.id = transitions[x].id.toString();
					break;
				}			
			}

			if (transitionObj != null) {

				// found mapped transition, go ahead and make JIRA transition
				tRequestObj.transition = transitionObj;
				tRequestBody = JSON.stringify(tRequestObj);

				// transition to updated status
				sm = new sn_ws.RESTMessageV2();
				sm.setHttpMethod("post");
				sm.setEndpoint(wsUrl + "/" + jiraissuekey + "/transitions");
				sm.setBasicAuth(jiraUser,jiraPassword);
				sm.setRequestHeader('Content-Type','application/json');
				sm.setRequestHeader('Accept','application/json');
				sm.setRequestBody(tRequestBody);
				sm.setHttpTimeout(10000); 

				//gs.info("TRANSITION REQUEST BODY: " + tRequestBody);

				response = sm.execute();

				responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
				status = response.getStatusCode();

				//gs.info("TRANSITION RESPONSE BODY: " + responseBody + " " + response.getBody() + " " + response.getErrorCode() );

			} // issue doesn't already exist
			
		}
								
	} catch(ex) {
		responseBody = ex.getMessage();
		status = '500';
		
		gs.info("Create JIRA Issue Error: " + ex.getMessage() );
		
	} finally {
		requestBody = sm ? sm.getRequestBody():null;
	}
	
	
}]]></script>
        <synchronous>false</synchronous>
        <sys_class_name>sysevent_script_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-07-02 16:15:58</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>a91d2035db031300996485184b961998</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>Create JIRA Story</sys_name>
        <sys_overrides/>
        <sys_package display_value="JIRA Integration" source="x_232048_jira_inte">4b8f5740db031300996485184b96199e</sys_package>
        <sys_policy/>
        <sys_scope display_value="JIRA Integration">4b8f5740db031300996485184b96199e</sys_scope>
        <sys_update_name>sysevent_script_action_a91d2035db031300996485184b961998</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-07-09 20:38:04</sys_updated_on>
    </sysevent_script_action>
</record_update>
